#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLVM")]
	public partial class QLVMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCONFIG_VM(CONFIG_VM instance);
    partial void UpdateCONFIG_VM(CONFIG_VM instance);
    partial void DeleteCONFIG_VM(CONFIG_VM instance);
    partial void InsertOS_VM(OS_VM instance);
    partial void UpdateOS_VM(OS_VM instance);
    partial void DeleteOS_VM(OS_VM instance);
    partial void InsertPRICE_VM(PRICE_VM instance);
    partial void UpdatePRICE_VM(PRICE_VM instance);
    partial void DeletePRICE_VM(PRICE_VM instance);
    partial void InsertTICKET_VM(TICKET_VM instance);
    partial void UpdateTICKET_VM(TICKET_VM instance);
    partial void DeleteTICKET_VM(TICKET_VM instance);
    partial void InsertUNIT_VM(UNIT_VM instance);
    partial void UpdateUNIT_VM(UNIT_VM instance);
    partial void DeleteUNIT_VM(UNIT_VM instance);
    partial void InsertVM_STAT(VM_STAT instance);
    partial void UpdateVM_STAT(VM_STAT instance);
    partial void DeleteVM_STAT(VM_STAT instance);
    partial void InsertSTATUS_VM(STATUS_VM instance);
    partial void UpdateSTATUS_VM(STATUS_VM instance);
    partial void DeleteSTATUS_VM(STATUS_VM instance);
    partial void InsertIP_VM(IP_VM instance);
    partial void UpdateIP_VM(IP_VM instance);
    partial void DeleteIP_VM(IP_VM instance);
    partial void InsertCRENDENTIAL_VM(CRENDENTIAL_VM instance);
    partial void UpdateCRENDENTIAL_VM(CRENDENTIAL_VM instance);
    partial void DeleteCRENDENTIAL_VM(CRENDENTIAL_VM instance);
    #endregion
		
		public QLVMDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QLVMConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QLVMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLVMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLVMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLVMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CONFIG_VM> CONFIG_VMs
		{
			get
			{
				return this.GetTable<CONFIG_VM>();
			}
		}
		
		public System.Data.Linq.Table<OS_VM> OS_VMs
		{
			get
			{
				return this.GetTable<OS_VM>();
			}
		}
		
		public System.Data.Linq.Table<PRICE_VM> PRICE_VMs
		{
			get
			{
				return this.GetTable<PRICE_VM>();
			}
		}
		
		public System.Data.Linq.Table<TICKET_VM> TICKET_VMs
		{
			get
			{
				return this.GetTable<TICKET_VM>();
			}
		}
		
		public System.Data.Linq.Table<UNIT_VM> UNIT_VMs
		{
			get
			{
				return this.GetTable<UNIT_VM>();
			}
		}
		
		public System.Data.Linq.Table<VM_STAT> VM_STATs
		{
			get
			{
				return this.GetTable<VM_STAT>();
			}
		}
		
		public System.Data.Linq.Table<STATUS_VM> STATUS_VMs
		{
			get
			{
				return this.GetTable<STATUS_VM>();
			}
		}
		
		public System.Data.Linq.Table<IP_VM> IP_VMs
		{
			get
			{
				return this.GetTable<IP_VM>();
			}
		}
		
		public System.Data.Linq.Table<CRENDENTIAL_VM> CRENDENTIAL_VMs
		{
			get
			{
				return this.GetTable<CRENDENTIAL_VM>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CONFIG_VM")]
	public partial class CONFIG_VM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_CONFIG;
		
		private System.Nullable<int> _ID_TICKET;
		
		private string _VM_ID;
		
		private System.Nullable<int> _CPU;
		
		private System.Nullable<int> _RAM;
		
		private System.Nullable<int> _ID_OS;
		
		private System.Nullable<int> _DISK_SLOW;
		
		private System.Nullable<int> _DISK_FAST;
		
		private string _PRICE;
		
		private EntityRef<OS_VM> _OS_VM;
		
		private EntityRef<TICKET_VM> _TICKET_VM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CONFIGChanging(int value);
    partial void OnID_CONFIGChanged();
    partial void OnID_TICKETChanging(System.Nullable<int> value);
    partial void OnID_TICKETChanged();
    partial void OnVM_IDChanging(string value);
    partial void OnVM_IDChanged();
    partial void OnCPUChanging(System.Nullable<int> value);
    partial void OnCPUChanged();
    partial void OnRAMChanging(System.Nullable<int> value);
    partial void OnRAMChanged();
    partial void OnID_OSChanging(System.Nullable<int> value);
    partial void OnID_OSChanged();
    partial void OnDISK_SLOWChanging(System.Nullable<int> value);
    partial void OnDISK_SLOWChanged();
    partial void OnDISK_FASTChanging(System.Nullable<int> value);
    partial void OnDISK_FASTChanged();
    partial void OnPRICEChanging(string value);
    partial void OnPRICEChanged();
    #endregion
		
		public CONFIG_VM()
		{
			this._OS_VM = default(EntityRef<OS_VM>);
			this._TICKET_VM = default(EntityRef<TICKET_VM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_CONFIG", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_CONFIG
		{
			get
			{
				return this._ID_CONFIG;
			}
			set
			{
				if ((this._ID_CONFIG != value))
				{
					this.OnID_CONFIGChanging(value);
					this.SendPropertyChanging();
					this._ID_CONFIG = value;
					this.SendPropertyChanged("ID_CONFIG");
					this.OnID_CONFIGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TICKET", DbType="Int")]
		public System.Nullable<int> ID_TICKET
		{
			get
			{
				return this._ID_TICKET;
			}
			set
			{
				if ((this._ID_TICKET != value))
				{
					if (this._TICKET_VM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TICKETChanging(value);
					this.SendPropertyChanging();
					this._ID_TICKET = value;
					this.SendPropertyChanged("ID_TICKET");
					this.OnID_TICKETChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VM_ID", DbType="NVarChar(50)")]
		public string VM_ID
		{
			get
			{
				return this._VM_ID;
			}
			set
			{
				if ((this._VM_ID != value))
				{
					this.OnVM_IDChanging(value);
					this.SendPropertyChanging();
					this._VM_ID = value;
					this.SendPropertyChanged("VM_ID");
					this.OnVM_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPU", DbType="Int")]
		public System.Nullable<int> CPU
		{
			get
			{
				return this._CPU;
			}
			set
			{
				if ((this._CPU != value))
				{
					this.OnCPUChanging(value);
					this.SendPropertyChanging();
					this._CPU = value;
					this.SendPropertyChanged("CPU");
					this.OnCPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAM", DbType="Int")]
		public System.Nullable<int> RAM
		{
			get
			{
				return this._RAM;
			}
			set
			{
				if ((this._RAM != value))
				{
					this.OnRAMChanging(value);
					this.SendPropertyChanging();
					this._RAM = value;
					this.SendPropertyChanged("RAM");
					this.OnRAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_OS", DbType="Int")]
		public System.Nullable<int> ID_OS
		{
			get
			{
				return this._ID_OS;
			}
			set
			{
				if ((this._ID_OS != value))
				{
					if (this._OS_VM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_OSChanging(value);
					this.SendPropertyChanging();
					this._ID_OS = value;
					this.SendPropertyChanged("ID_OS");
					this.OnID_OSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISK_SLOW", DbType="Int")]
		public System.Nullable<int> DISK_SLOW
		{
			get
			{
				return this._DISK_SLOW;
			}
			set
			{
				if ((this._DISK_SLOW != value))
				{
					this.OnDISK_SLOWChanging(value);
					this.SendPropertyChanging();
					this._DISK_SLOW = value;
					this.SendPropertyChanged("DISK_SLOW");
					this.OnDISK_SLOWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISK_FAST", DbType="Int")]
		public System.Nullable<int> DISK_FAST
		{
			get
			{
				return this._DISK_FAST;
			}
			set
			{
				if ((this._DISK_FAST != value))
				{
					this.OnDISK_FASTChanging(value);
					this.SendPropertyChanging();
					this._DISK_FAST = value;
					this.SendPropertyChanged("DISK_FAST");
					this.OnDISK_FASTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="NVarChar(50)")]
		public string PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OS_VM_CONFIG_VM", Storage="_OS_VM", ThisKey="ID_OS", OtherKey="ID", IsForeignKey=true)]
		public OS_VM OS_VM
		{
			get
			{
				return this._OS_VM.Entity;
			}
			set
			{
				OS_VM previousValue = this._OS_VM.Entity;
				if (((previousValue != value) 
							|| (this._OS_VM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OS_VM.Entity = null;
						previousValue.CONFIG_VMs.Remove(this);
					}
					this._OS_VM.Entity = value;
					if ((value != null))
					{
						value.CONFIG_VMs.Add(this);
						this._ID_OS = value.ID;
					}
					else
					{
						this._ID_OS = default(Nullable<int>);
					}
					this.SendPropertyChanged("OS_VM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TICKET_VM_CONFIG_VM", Storage="_TICKET_VM", ThisKey="ID_TICKET", OtherKey="ID", IsForeignKey=true)]
		public TICKET_VM TICKET_VM
		{
			get
			{
				return this._TICKET_VM.Entity;
			}
			set
			{
				TICKET_VM previousValue = this._TICKET_VM.Entity;
				if (((previousValue != value) 
							|| (this._TICKET_VM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TICKET_VM.Entity = null;
						previousValue.CONFIG_VMs.Remove(this);
					}
					this._TICKET_VM.Entity = value;
					if ((value != null))
					{
						value.CONFIG_VMs.Add(this);
						this._ID_TICKET = value.ID;
					}
					else
					{
						this._ID_TICKET = default(Nullable<int>);
					}
					this.SendPropertyChanged("TICKET_VM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OS_VM")]
	public partial class OS_VM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TYPE_OS;
		
		private string _NAME_OS;
		
		private EntitySet<CONFIG_VM> _CONFIG_VMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTYPE_OSChanging(string value);
    partial void OnTYPE_OSChanged();
    partial void OnNAME_OSChanging(string value);
    partial void OnNAME_OSChanged();
    #endregion
		
		public OS_VM()
		{
			this._CONFIG_VMs = new EntitySet<CONFIG_VM>(new Action<CONFIG_VM>(this.attach_CONFIG_VMs), new Action<CONFIG_VM>(this.detach_CONFIG_VMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE_OS", DbType="NVarChar(50)")]
		public string TYPE_OS
		{
			get
			{
				return this._TYPE_OS;
			}
			set
			{
				if ((this._TYPE_OS != value))
				{
					this.OnTYPE_OSChanging(value);
					this.SendPropertyChanging();
					this._TYPE_OS = value;
					this.SendPropertyChanged("TYPE_OS");
					this.OnTYPE_OSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME_OS", DbType="NVarChar(100)")]
		public string NAME_OS
		{
			get
			{
				return this._NAME_OS;
			}
			set
			{
				if ((this._NAME_OS != value))
				{
					this.OnNAME_OSChanging(value);
					this.SendPropertyChanging();
					this._NAME_OS = value;
					this.SendPropertyChanged("NAME_OS");
					this.OnNAME_OSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OS_VM_CONFIG_VM", Storage="_CONFIG_VMs", ThisKey="ID", OtherKey="ID_OS")]
		public EntitySet<CONFIG_VM> CONFIG_VMs
		{
			get
			{
				return this._CONFIG_VMs;
			}
			set
			{
				this._CONFIG_VMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CONFIG_VMs(CONFIG_VM entity)
		{
			this.SendPropertyChanging();
			entity.OS_VM = this;
		}
		
		private void detach_CONFIG_VMs(CONFIG_VM entity)
		{
			this.SendPropertyChanging();
			entity.OS_VM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRICE_VM")]
	public partial class PRICE_VM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CPU;
		
		private string _RAM;
		
		private string _DISK_SLOW;
		
		private string _DISK_FAST;
		
		private EntitySet<TICKET_VM> _TICKET_VMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCPUChanging(string value);
    partial void OnCPUChanged();
    partial void OnRAMChanging(string value);
    partial void OnRAMChanged();
    partial void OnDISK_SLOWChanging(string value);
    partial void OnDISK_SLOWChanged();
    partial void OnDISK_FASTChanging(string value);
    partial void OnDISK_FASTChanged();
    #endregion
		
		public PRICE_VM()
		{
			this._TICKET_VMs = new EntitySet<TICKET_VM>(new Action<TICKET_VM>(this.attach_TICKET_VMs), new Action<TICKET_VM>(this.detach_TICKET_VMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPU", DbType="NVarChar(50)")]
		public string CPU
		{
			get
			{
				return this._CPU;
			}
			set
			{
				if ((this._CPU != value))
				{
					this.OnCPUChanging(value);
					this.SendPropertyChanging();
					this._CPU = value;
					this.SendPropertyChanged("CPU");
					this.OnCPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAM", DbType="NVarChar(50)")]
		public string RAM
		{
			get
			{
				return this._RAM;
			}
			set
			{
				if ((this._RAM != value))
				{
					this.OnRAMChanging(value);
					this.SendPropertyChanging();
					this._RAM = value;
					this.SendPropertyChanged("RAM");
					this.OnRAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISK_SLOW", DbType="NVarChar(50)")]
		public string DISK_SLOW
		{
			get
			{
				return this._DISK_SLOW;
			}
			set
			{
				if ((this._DISK_SLOW != value))
				{
					this.OnDISK_SLOWChanging(value);
					this.SendPropertyChanging();
					this._DISK_SLOW = value;
					this.SendPropertyChanged("DISK_SLOW");
					this.OnDISK_SLOWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISK_FAST", DbType="NVarChar(50)")]
		public string DISK_FAST
		{
			get
			{
				return this._DISK_FAST;
			}
			set
			{
				if ((this._DISK_FAST != value))
				{
					this.OnDISK_FASTChanging(value);
					this.SendPropertyChanging();
					this._DISK_FAST = value;
					this.SendPropertyChanged("DISK_FAST");
					this.OnDISK_FASTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRICE_VM_TICKET_VM", Storage="_TICKET_VMs", ThisKey="ID", OtherKey="ID_PRICE")]
		public EntitySet<TICKET_VM> TICKET_VMs
		{
			get
			{
				return this._TICKET_VMs;
			}
			set
			{
				this._TICKET_VMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TICKET_VMs(TICKET_VM entity)
		{
			this.SendPropertyChanging();
			entity.PRICE_VM = this;
		}
		
		private void detach_TICKET_VMs(TICKET_VM entity)
		{
			this.SendPropertyChanging();
			entity.PRICE_VM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TICKET_VM")]
	public partial class TICKET_VM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _STARTDATE;
		
		private System.Nullable<System.DateTime> _ENDDATE;
		
		private string _OWNER;
		
		private string _TICKETBA;
		
		private string _LOCATION;
		
		private System.Nullable<int> _ID_PRICE;
		
		private string _TOTAL_PRICE;
		
		private EntitySet<CONFIG_VM> _CONFIG_VMs;
		
		private EntityRef<PRICE_VM> _PRICE_VM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSTARTDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnSTARTDATEChanged();
    partial void OnENDDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnENDDATEChanged();
    partial void OnOWNERChanging(string value);
    partial void OnOWNERChanged();
    partial void OnTICKETBAChanging(string value);
    partial void OnTICKETBAChanged();
    partial void OnLOCATIONChanging(string value);
    partial void OnLOCATIONChanged();
    partial void OnID_PRICEChanging(System.Nullable<int> value);
    partial void OnID_PRICEChanged();
    partial void OnTOTAL_PRICEChanging(string value);
    partial void OnTOTAL_PRICEChanged();
    #endregion
		
		public TICKET_VM()
		{
			this._CONFIG_VMs = new EntitySet<CONFIG_VM>(new Action<CONFIG_VM>(this.attach_CONFIG_VMs), new Action<CONFIG_VM>(this.detach_CONFIG_VMs));
			this._PRICE_VM = default(EntityRef<PRICE_VM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STARTDATE", DbType="Date")]
		public System.Nullable<System.DateTime> STARTDATE
		{
			get
			{
				return this._STARTDATE;
			}
			set
			{
				if ((this._STARTDATE != value))
				{
					this.OnSTARTDATEChanging(value);
					this.SendPropertyChanging();
					this._STARTDATE = value;
					this.SendPropertyChanged("STARTDATE");
					this.OnSTARTDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENDDATE", DbType="Date")]
		public System.Nullable<System.DateTime> ENDDATE
		{
			get
			{
				return this._ENDDATE;
			}
			set
			{
				if ((this._ENDDATE != value))
				{
					this.OnENDDATEChanging(value);
					this.SendPropertyChanging();
					this._ENDDATE = value;
					this.SendPropertyChanged("ENDDATE");
					this.OnENDDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OWNER", DbType="NVarChar(50)")]
		public string OWNER
		{
			get
			{
				return this._OWNER;
			}
			set
			{
				if ((this._OWNER != value))
				{
					this.OnOWNERChanging(value);
					this.SendPropertyChanging();
					this._OWNER = value;
					this.SendPropertyChanged("OWNER");
					this.OnOWNERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TICKETBA", DbType="NVarChar(50)")]
		public string TICKETBA
		{
			get
			{
				return this._TICKETBA;
			}
			set
			{
				if ((this._TICKETBA != value))
				{
					this.OnTICKETBAChanging(value);
					this.SendPropertyChanging();
					this._TICKETBA = value;
					this.SendPropertyChanged("TICKETBA");
					this.OnTICKETBAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOCATION", DbType="NVarChar(50)")]
		public string LOCATION
		{
			get
			{
				return this._LOCATION;
			}
			set
			{
				if ((this._LOCATION != value))
				{
					this.OnLOCATIONChanging(value);
					this.SendPropertyChanging();
					this._LOCATION = value;
					this.SendPropertyChanged("LOCATION");
					this.OnLOCATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_PRICE", DbType="Int")]
		public System.Nullable<int> ID_PRICE
		{
			get
			{
				return this._ID_PRICE;
			}
			set
			{
				if ((this._ID_PRICE != value))
				{
					if (this._PRICE_VM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PRICEChanging(value);
					this.SendPropertyChanging();
					this._ID_PRICE = value;
					this.SendPropertyChanged("ID_PRICE");
					this.OnID_PRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTAL_PRICE", DbType="NVarChar(50)")]
		public string TOTAL_PRICE
		{
			get
			{
				return this._TOTAL_PRICE;
			}
			set
			{
				if ((this._TOTAL_PRICE != value))
				{
					this.OnTOTAL_PRICEChanging(value);
					this.SendPropertyChanging();
					this._TOTAL_PRICE = value;
					this.SendPropertyChanged("TOTAL_PRICE");
					this.OnTOTAL_PRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TICKET_VM_CONFIG_VM", Storage="_CONFIG_VMs", ThisKey="ID", OtherKey="ID_TICKET")]
		public EntitySet<CONFIG_VM> CONFIG_VMs
		{
			get
			{
				return this._CONFIG_VMs;
			}
			set
			{
				this._CONFIG_VMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRICE_VM_TICKET_VM", Storage="_PRICE_VM", ThisKey="ID_PRICE", OtherKey="ID", IsForeignKey=true)]
		public PRICE_VM PRICE_VM
		{
			get
			{
				return this._PRICE_VM.Entity;
			}
			set
			{
				PRICE_VM previousValue = this._PRICE_VM.Entity;
				if (((previousValue != value) 
							|| (this._PRICE_VM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRICE_VM.Entity = null;
						previousValue.TICKET_VMs.Remove(this);
					}
					this._PRICE_VM.Entity = value;
					if ((value != null))
					{
						value.TICKET_VMs.Add(this);
						this._ID_PRICE = value.ID;
					}
					else
					{
						this._ID_PRICE = default(Nullable<int>);
					}
					this.SendPropertyChanged("PRICE_VM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CONFIG_VMs(CONFIG_VM entity)
		{
			this.SendPropertyChanging();
			entity.TICKET_VM = this;
		}
		
		private void detach_CONFIG_VMs(CONFIG_VM entity)
		{
			this.SendPropertyChanging();
			entity.TICKET_VM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UNIT_VM")]
	public partial class UNIT_VM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_UNIT;
		
		private string _UNIT_NAME;
		
		private EntitySet<VM_STAT> _VM_STATs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UNITChanging(int value);
    partial void OnID_UNITChanged();
    partial void OnUNIT_NAMEChanging(string value);
    partial void OnUNIT_NAMEChanged();
    #endregion
		
		public UNIT_VM()
		{
			this._VM_STATs = new EntitySet<VM_STAT>(new Action<VM_STAT>(this.attach_VM_STATs), new Action<VM_STAT>(this.detach_VM_STATs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_UNIT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_UNIT
		{
			get
			{
				return this._ID_UNIT;
			}
			set
			{
				if ((this._ID_UNIT != value))
				{
					this.OnID_UNITChanging(value);
					this.SendPropertyChanging();
					this._ID_UNIT = value;
					this.SendPropertyChanged("ID_UNIT");
					this.OnID_UNITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UNIT_NAME", DbType="NVarChar(50)")]
		public string UNIT_NAME
		{
			get
			{
				return this._UNIT_NAME;
			}
			set
			{
				if ((this._UNIT_NAME != value))
				{
					this.OnUNIT_NAMEChanging(value);
					this.SendPropertyChanging();
					this._UNIT_NAME = value;
					this.SendPropertyChanged("UNIT_NAME");
					this.OnUNIT_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UNIT_VM_VM_STAT", Storage="_VM_STATs", ThisKey="ID_UNIT", OtherKey="ID_UNIT")]
		public EntitySet<VM_STAT> VM_STATs
		{
			get
			{
				return this._VM_STATs;
			}
			set
			{
				this._VM_STATs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VM_STATs(VM_STAT entity)
		{
			this.SendPropertyChanging();
			entity.UNIT_VM = this;
		}
		
		private void detach_VM_STATs(VM_STAT entity)
		{
			this.SendPropertyChanging();
			entity.UNIT_VM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VM_STATS")]
	public partial class VM_STAT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_VM;
		
		private System.Nullable<int> _ID_UNIT;
		
		private System.Nullable<int> _ID_STATUS;
		
		private string _VM_NAME;
		
		private string _TYPE;
		
		private string _OWNER;
		
		private string _LOCATION;
		
		private System.Nullable<System.DateTime> _START_DATE;
		
		private System.Nullable<System.DateTime> _END_DATE;
		
		private EntitySet<IP_VM> _IP_VMs;
		
		private EntitySet<CRENDENTIAL_VM> _CRENDENTIAL_VMs;
		
		private EntityRef<UNIT_VM> _UNIT_VM;
		
		private EntityRef<STATUS_VM> _STATUS_VM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_VMChanging(int value);
    partial void OnID_VMChanged();
    partial void OnID_UNITChanging(System.Nullable<int> value);
    partial void OnID_UNITChanged();
    partial void OnID_STATUSChanging(System.Nullable<int> value);
    partial void OnID_STATUSChanged();
    partial void OnVM_NAMEChanging(string value);
    partial void OnVM_NAMEChanged();
    partial void OnTYPEChanging(string value);
    partial void OnTYPEChanged();
    partial void OnOWNERChanging(string value);
    partial void OnOWNERChanged();
    partial void OnLOCATIONChanging(string value);
    partial void OnLOCATIONChanged();
    partial void OnSTART_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnSTART_DATEChanged();
    partial void OnEND_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnEND_DATEChanged();
    #endregion
		
		public VM_STAT()
		{
			this._IP_VMs = new EntitySet<IP_VM>(new Action<IP_VM>(this.attach_IP_VMs), new Action<IP_VM>(this.detach_IP_VMs));
			this._CRENDENTIAL_VMs = new EntitySet<CRENDENTIAL_VM>(new Action<CRENDENTIAL_VM>(this.attach_CRENDENTIAL_VMs), new Action<CRENDENTIAL_VM>(this.detach_CRENDENTIAL_VMs));
			this._UNIT_VM = default(EntityRef<UNIT_VM>);
			this._STATUS_VM = default(EntityRef<STATUS_VM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_VM", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_VM
		{
			get
			{
				return this._ID_VM;
			}
			set
			{
				if ((this._ID_VM != value))
				{
					this.OnID_VMChanging(value);
					this.SendPropertyChanging();
					this._ID_VM = value;
					this.SendPropertyChanged("ID_VM");
					this.OnID_VMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_UNIT", DbType="Int")]
		public System.Nullable<int> ID_UNIT
		{
			get
			{
				return this._ID_UNIT;
			}
			set
			{
				if ((this._ID_UNIT != value))
				{
					if (this._UNIT_VM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_UNITChanging(value);
					this.SendPropertyChanging();
					this._ID_UNIT = value;
					this.SendPropertyChanged("ID_UNIT");
					this.OnID_UNITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_STATUS", DbType="Int")]
		public System.Nullable<int> ID_STATUS
		{
			get
			{
				return this._ID_STATUS;
			}
			set
			{
				if ((this._ID_STATUS != value))
				{
					if (this._STATUS_VM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_STATUSChanging(value);
					this.SendPropertyChanging();
					this._ID_STATUS = value;
					this.SendPropertyChanged("ID_STATUS");
					this.OnID_STATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VM_NAME", DbType="NVarChar(50)")]
		public string VM_NAME
		{
			get
			{
				return this._VM_NAME;
			}
			set
			{
				if ((this._VM_NAME != value))
				{
					this.OnVM_NAMEChanging(value);
					this.SendPropertyChanging();
					this._VM_NAME = value;
					this.SendPropertyChanged("VM_NAME");
					this.OnVM_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE", DbType="NVarChar(50)")]
		public string TYPE
		{
			get
			{
				return this._TYPE;
			}
			set
			{
				if ((this._TYPE != value))
				{
					this.OnTYPEChanging(value);
					this.SendPropertyChanging();
					this._TYPE = value;
					this.SendPropertyChanged("TYPE");
					this.OnTYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OWNER", DbType="NVarChar(50)")]
		public string OWNER
		{
			get
			{
				return this._OWNER;
			}
			set
			{
				if ((this._OWNER != value))
				{
					this.OnOWNERChanging(value);
					this.SendPropertyChanging();
					this._OWNER = value;
					this.SendPropertyChanged("OWNER");
					this.OnOWNERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOCATION", DbType="NVarChar(50)")]
		public string LOCATION
		{
			get
			{
				return this._LOCATION;
			}
			set
			{
				if ((this._LOCATION != value))
				{
					this.OnLOCATIONChanging(value);
					this.SendPropertyChanging();
					this._LOCATION = value;
					this.SendPropertyChanged("LOCATION");
					this.OnLOCATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_START_DATE", DbType="Date")]
		public System.Nullable<System.DateTime> START_DATE
		{
			get
			{
				return this._START_DATE;
			}
			set
			{
				if ((this._START_DATE != value))
				{
					this.OnSTART_DATEChanging(value);
					this.SendPropertyChanging();
					this._START_DATE = value;
					this.SendPropertyChanged("START_DATE");
					this.OnSTART_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_END_DATE", DbType="Date")]
		public System.Nullable<System.DateTime> END_DATE
		{
			get
			{
				return this._END_DATE;
			}
			set
			{
				if ((this._END_DATE != value))
				{
					this.OnEND_DATEChanging(value);
					this.SendPropertyChanging();
					this._END_DATE = value;
					this.SendPropertyChanged("END_DATE");
					this.OnEND_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VM_STAT_IP_VM", Storage="_IP_VMs", ThisKey="ID_VM", OtherKey="ID_VM")]
		public EntitySet<IP_VM> IP_VMs
		{
			get
			{
				return this._IP_VMs;
			}
			set
			{
				this._IP_VMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VM_STAT_CRENDENTIAL_VM", Storage="_CRENDENTIAL_VMs", ThisKey="ID_VM", OtherKey="ID_VM")]
		public EntitySet<CRENDENTIAL_VM> CRENDENTIAL_VMs
		{
			get
			{
				return this._CRENDENTIAL_VMs;
			}
			set
			{
				this._CRENDENTIAL_VMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UNIT_VM_VM_STAT", Storage="_UNIT_VM", ThisKey="ID_UNIT", OtherKey="ID_UNIT", IsForeignKey=true)]
		public UNIT_VM UNIT_VM
		{
			get
			{
				return this._UNIT_VM.Entity;
			}
			set
			{
				UNIT_VM previousValue = this._UNIT_VM.Entity;
				if (((previousValue != value) 
							|| (this._UNIT_VM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UNIT_VM.Entity = null;
						previousValue.VM_STATs.Remove(this);
					}
					this._UNIT_VM.Entity = value;
					if ((value != null))
					{
						value.VM_STATs.Add(this);
						this._ID_UNIT = value.ID_UNIT;
					}
					else
					{
						this._ID_UNIT = default(Nullable<int>);
					}
					this.SendPropertyChanged("UNIT_VM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUS_VM_VM_STAT", Storage="_STATUS_VM", ThisKey="ID_STATUS", OtherKey="ID_STATUS", IsForeignKey=true)]
		public STATUS_VM STATUS_VM
		{
			get
			{
				return this._STATUS_VM.Entity;
			}
			set
			{
				STATUS_VM previousValue = this._STATUS_VM.Entity;
				if (((previousValue != value) 
							|| (this._STATUS_VM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STATUS_VM.Entity = null;
						previousValue.VM_STATs.Remove(this);
					}
					this._STATUS_VM.Entity = value;
					if ((value != null))
					{
						value.VM_STATs.Add(this);
						this._ID_STATUS = value.ID_STATUS;
					}
					else
					{
						this._ID_STATUS = default(Nullable<int>);
					}
					this.SendPropertyChanged("STATUS_VM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IP_VMs(IP_VM entity)
		{
			this.SendPropertyChanging();
			entity.VM_STAT = this;
		}
		
		private void detach_IP_VMs(IP_VM entity)
		{
			this.SendPropertyChanging();
			entity.VM_STAT = null;
		}
		
		private void attach_CRENDENTIAL_VMs(CRENDENTIAL_VM entity)
		{
			this.SendPropertyChanging();
			entity.VM_STAT = this;
		}
		
		private void detach_CRENDENTIAL_VMs(CRENDENTIAL_VM entity)
		{
			this.SendPropertyChanging();
			entity.VM_STAT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATUS_VM")]
	public partial class STATUS_VM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_STATUS;
		
		private string _STATUS;
		
		private EntitySet<VM_STAT> _VM_STATs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_STATUSChanging(int value);
    partial void OnID_STATUSChanged();
    partial void OnSTATUSChanging(string value);
    partial void OnSTATUSChanged();
    #endregion
		
		public STATUS_VM()
		{
			this._VM_STATs = new EntitySet<VM_STAT>(new Action<VM_STAT>(this.attach_VM_STATs), new Action<VM_STAT>(this.detach_VM_STATs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_STATUS", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_STATUS
		{
			get
			{
				return this._ID_STATUS;
			}
			set
			{
				if ((this._ID_STATUS != value))
				{
					this.OnID_STATUSChanging(value);
					this.SendPropertyChanging();
					this._ID_STATUS = value;
					this.SendPropertyChanged("ID_STATUS");
					this.OnID_STATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATUS", DbType="NVarChar(50)")]
		public string STATUS
		{
			get
			{
				return this._STATUS;
			}
			set
			{
				if ((this._STATUS != value))
				{
					this.OnSTATUSChanging(value);
					this.SendPropertyChanging();
					this._STATUS = value;
					this.SendPropertyChanged("STATUS");
					this.OnSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUS_VM_VM_STAT", Storage="_VM_STATs", ThisKey="ID_STATUS", OtherKey="ID_STATUS")]
		public EntitySet<VM_STAT> VM_STATs
		{
			get
			{
				return this._VM_STATs;
			}
			set
			{
				this._VM_STATs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VM_STATs(VM_STAT entity)
		{
			this.SendPropertyChanging();
			entity.STATUS_VM = this;
		}
		
		private void detach_VM_STATs(VM_STAT entity)
		{
			this.SendPropertyChanging();
			entity.STATUS_VM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IP_VM")]
	public partial class IP_VM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_IP;
		
		private System.Nullable<int> _ID_VM;
		
		private string _IP_ADDRESS;
		
		private EntityRef<VM_STAT> _VM_STAT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_IPChanging(int value);
    partial void OnID_IPChanged();
    partial void OnID_VMChanging(System.Nullable<int> value);
    partial void OnID_VMChanged();
    partial void OnIP_ADDRESSChanging(string value);
    partial void OnIP_ADDRESSChanged();
    #endregion
		
		public IP_VM()
		{
			this._VM_STAT = default(EntityRef<VM_STAT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_IP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_IP
		{
			get
			{
				return this._ID_IP;
			}
			set
			{
				if ((this._ID_IP != value))
				{
					this.OnID_IPChanging(value);
					this.SendPropertyChanging();
					this._ID_IP = value;
					this.SendPropertyChanged("ID_IP");
					this.OnID_IPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_VM", DbType="Int")]
		public System.Nullable<int> ID_VM
		{
			get
			{
				return this._ID_VM;
			}
			set
			{
				if ((this._ID_VM != value))
				{
					if (this._VM_STAT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_VMChanging(value);
					this.SendPropertyChanging();
					this._ID_VM = value;
					this.SendPropertyChanged("ID_VM");
					this.OnID_VMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP_ADDRESS", DbType="NVarChar(50)")]
		public string IP_ADDRESS
		{
			get
			{
				return this._IP_ADDRESS;
			}
			set
			{
				if ((this._IP_ADDRESS != value))
				{
					this.OnIP_ADDRESSChanging(value);
					this.SendPropertyChanging();
					this._IP_ADDRESS = value;
					this.SendPropertyChanged("IP_ADDRESS");
					this.OnIP_ADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VM_STAT_IP_VM", Storage="_VM_STAT", ThisKey="ID_VM", OtherKey="ID_VM", IsForeignKey=true)]
		public VM_STAT VM_STAT
		{
			get
			{
				return this._VM_STAT.Entity;
			}
			set
			{
				VM_STAT previousValue = this._VM_STAT.Entity;
				if (((previousValue != value) 
							|| (this._VM_STAT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VM_STAT.Entity = null;
						previousValue.IP_VMs.Remove(this);
					}
					this._VM_STAT.Entity = value;
					if ((value != null))
					{
						value.IP_VMs.Add(this);
						this._ID_VM = value.ID_VM;
					}
					else
					{
						this._ID_VM = default(Nullable<int>);
					}
					this.SendPropertyChanged("VM_STAT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CRENDENTIAL_VM")]
	public partial class CRENDENTIAL_VM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_CREN;
		
		private System.Nullable<int> _ID_VM;
		
		private string _CRENDENTIAL;
		
		private EntityRef<VM_STAT> _VM_STAT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CRENChanging(int value);
    partial void OnID_CRENChanged();
    partial void OnID_VMChanging(System.Nullable<int> value);
    partial void OnID_VMChanged();
    partial void OnCRENDENTIALChanging(string value);
    partial void OnCRENDENTIALChanged();
    #endregion
		
		public CRENDENTIAL_VM()
		{
			this._VM_STAT = default(EntityRef<VM_STAT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_CREN", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_CREN
		{
			get
			{
				return this._ID_CREN;
			}
			set
			{
				if ((this._ID_CREN != value))
				{
					this.OnID_CRENChanging(value);
					this.SendPropertyChanging();
					this._ID_CREN = value;
					this.SendPropertyChanged("ID_CREN");
					this.OnID_CRENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_VM", DbType="Int")]
		public System.Nullable<int> ID_VM
		{
			get
			{
				return this._ID_VM;
			}
			set
			{
				if ((this._ID_VM != value))
				{
					if (this._VM_STAT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_VMChanging(value);
					this.SendPropertyChanging();
					this._ID_VM = value;
					this.SendPropertyChanged("ID_VM");
					this.OnID_VMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CRENDENTIAL", DbType="NVarChar(MAX)")]
		public string CRENDENTIAL
		{
			get
			{
				return this._CRENDENTIAL;
			}
			set
			{
				if ((this._CRENDENTIAL != value))
				{
					this.OnCRENDENTIALChanging(value);
					this.SendPropertyChanging();
					this._CRENDENTIAL = value;
					this.SendPropertyChanged("CRENDENTIAL");
					this.OnCRENDENTIALChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VM_STAT_CRENDENTIAL_VM", Storage="_VM_STAT", ThisKey="ID_VM", OtherKey="ID_VM", IsForeignKey=true)]
		public VM_STAT VM_STAT
		{
			get
			{
				return this._VM_STAT.Entity;
			}
			set
			{
				VM_STAT previousValue = this._VM_STAT.Entity;
				if (((previousValue != value) 
							|| (this._VM_STAT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VM_STAT.Entity = null;
						previousValue.CRENDENTIAL_VMs.Remove(this);
					}
					this._VM_STAT.Entity = value;
					if ((value != null))
					{
						value.CRENDENTIAL_VMs.Add(this);
						this._ID_VM = value.ID_VM;
					}
					else
					{
						this._ID_VM = default(Nullable<int>);
					}
					this.SendPropertyChanged("VM_STAT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
